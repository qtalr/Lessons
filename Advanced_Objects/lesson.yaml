- Class: meta
  Course: Lessons
  Lesson: Advanced Objects
  Author: Jerid Francom
  Type: Standard
  Organization: Wake Forest University
  Version: 0.9.0

# Overview ---------------------------------------------------------------

- Class: text
  Output: Welcome to Advanced Objects! In this lesson, explore some of the more advanced objects in R. We will focus on matrices and lists. This will prepare you to work with methods in data analysis.

- Class: text
  Output: "Don't forget that you can, temporarily, leave the lesson by typing `play()` and then return by typing `nxt()`. You can also completely stop a lesson by typing `bye()` or hitting `CTRL + C`."

# Matrices ---------------------------------------------------------------

# Definition

- Class: cmd_question
  Output: A matrix is a collection of data elements arranged in a two-dimensional rectangular layout. The following is an example of a matrix with 2 rows and 3 columns. Type `ex_int_mat` to see the matrix.
  CorrectAnswer: ex_int_mat
  AnswerTests: omnitest(correctExpr='ex_int_mat')
  Hint: Type `ex_int_mat` to see the matrix.

- Class: cmd_question
  Output: A matrix is similar to a data frame in that it has rows and columns and the columns have the same length. However, a matrix is different from a data frame in that all of the elements in a matrix must be of the same type (e.g., numeric, character). Type `ex_char_mat` to see a matrix with character elements.
  CorrectAnswer: ex_char_mat
  AnswerTests: omnitest(correctExpr='ex_char_mat')
  Hint: Type `ex_char_mat` to see the matrix.

- Class: cmd_question
  Output: Let's see what happens if we attempt to combine the two matrices we just saw by columns with the `cbind()` function. Type `cbind(ex_int_mat, ex_char_mat)` to see what happens.
  CorrectAnswer: cbind(ex_int_mat, ex_char_mat)
  AnswerTests: omnitest(correctExpr='cbind(ex_int_mat, ex_char_mat)')
  Hint: Type `cbind(ex_int_mat, ex_char_mat)` to see what happens.

- Class: mult_question
  Output: What type are the elements in the combined matrix?
  AnswerChoices: Numeric; Character; Logical; Complex
  CorrectAnswer: Character
  AnswerTests: omnitest(correctVal='Character')
  Hint: Look at the use of quotations in the combined matrix.

- Class: text
  Output: Our numeric matrix was converted to a character matrix, as all of the elements in the combined matrix must be of the same type.

# Creating Matrices

- Class: cmd_question
  Output: We can create a matrix using the `matrix()` function. The first argument is the vector of elements to be arranged in the matrix. The second argument is the number of rows. The third argument is the number of columns. Type `matrix(1:6, 2, 3)` to see an example.
  CorrectAnswer: matrix(1:6, 2, 3)
  AnswerTests: omnitest(correctExpr='matrix(1:6, 2, 3)')
  Hint: Type `matrix(1:6, 2, 3)` to see an example.

- Class: cmd_question
  Output: We can also specify the elements to be arranged in the matrix by rows or columns. Type `matrix(1:6, 2, 3, byrow = TRUE)` to see an example.
  CorrectAnswer: matrix(1:6, 2, 3, byrow = TRUE)
  AnswerTests: omnitest(correctExpr='matrix(1:6, 2, 3, byrow = TRUE)')
  Hint: Type `matrix(1:6, 2, 3, byrow = TRUE)` to see an example.

# Naming Matrices

- Class: cmd_question
  Output: We can name the rows and columns of a matrix using the `dimnames()` function. The first argument is the matrix. The second argument is a list of the names of the rows. The third argument is a list of the names of the columns. Type `dimnames(ex_int_mat) <- list(c("row1", "row2"), c("col1", "col2", "col3"))` to add names to the rows and columns of the matrix.
  CorrectAnswer: dimnames(ex_int_mat) <- list(c("row1", "row2"), c("col1", "col2", "col3"))
  AnswerTests: omnitest(correctExpr='dimnames(ex_int_mat) <- list(c("row1", "row2"), c("col1", "col2", "col3"))')
  Hint: Type `dimnames(ex_int_mat) <- list(c("row1", "row2"), c("col1", "col2", "col3"))`.

- Class: cmd_question
  Output: Now type `ex_int_mat` to see the matrix with the row and column names.
  CorrectAnswer: ex_int_mat
  AnswerTests: omnitest(correctExpr='ex_int_mat')
  Hint: Type `ex_int_mat`.

- Class: text
  Output: You may have wondered why a function appears to be on the left side of the assignment operator. This is because the `dimnames()` function is a special type of function called a setter function. Setter functions are used to change the value of an object. In this case, we are changing the value of the `dimnames` attribute of the matrix.

- Class: text
  Output: Other setter functions for matrices include `rownames()` and `colnames()`. These functions are used to change the row and column names of a matrix, respectively.

# Inspecting Matrices

- Class: cmd_question
  Output: We can inspect the dimensions of a matrix using the `dim()` function. Type `dim(ex_int_mat)` to see the dimensions of the matrix.
  CorrectAnswer: dim(ex_int_mat)
  AnswerTests: omnitest(correctExpr='dim(ex_int_mat)')
  Hint: Type `dim(ex_int_mat)`.

- Class: cmd_question
  Output: Just as we can use `dim()` for matrices and data frames, so too we can use `nrow()` and `ncol()` for matrices. Type `nrow(ex_int_mat)` to see the number of rows in the matrix.
  CorrectAnswer: nrow(ex_int_mat)
  AnswerTests: omnitest(correctExpr='nrow(ex_int_mat)')
  Hint: Type `nrow(ex_int_mat)`.

# Accessing Elements of Matrices

- Class: cmd_question
  Output: We can access elements of a matrix using the row and column indices. Type `ex_int_mat[1, 2]` to see the element in the first row and second column.
  CorrectAnswer: ex_int_mat[1, 2]
  AnswerTests: omnitest(correctExpr='ex_int_mat[1, 2]')
  Hint: Type `ex_int_mat[1, 2]`.

- Class: cmd_question
  Output: Just like with data frames, bracket notation can be used to access multiple elements of a matrix. Type `ex_int_mat[1:2, 2:3]` to see the elements in the first and second rows and second and third columns.
  CorrectAnswer: ex_int_mat[1:2, 2:3]
  AnswerTests: omnitest(correctExpr='ex_int_mat[1:2, 2:3]')
  Hint: Type `ex_int_mat[1:2, 2:3]`.

- Class: cmd_question
  Output: If the matrix has row and column names, we can access elements using the names. Type `ex_int_mat["row1", "col2"]` to see the element in the first row and second column.
  CorrectAnswer: ex_int_mat["row1", "col2"]
  AnswerTests: omnitest(correctExpr='ex_int_mat["row1", "col2"]')
  Hint: Type `ex_int_mat["row1", "col2"]`.

- Class: cmd_question
  Output: We can use a vector of row and column names to access multiple elements of a matrix. Type `ex_int_mat[, c("col2", "col3")]` to see the elements in the second and third columns.
  CorrectAnswer: ex_int_mat[, c("col2", "col3")]
  AnswerTests: omnitest(correctExpr='ex_int_mat[, c("col2", "col3")]')
  Hint: Type `ex_int_mat[, c("col2", "col3")]`.

# Calculations with Matrices

- Class: cmd_question
  Output: We can perform calculations with matrices. Type `ex_int_mat * 2` to see the matrix with each element multiplied by 2.
  CorrectAnswer: ex_int_mat * 2
  AnswerTests: omnitest(correctExpr='ex_int_mat * 2')
  Hint: Type `ex_int_mat * 2`.

- Class: cmd_question
  Output: The ability to apply mathematical operations to matrices is one of the reasons they are so useful. Say we want to calculate the sum of the elements in each row of a matrix. Type `rowSums(ex_int_mat)` to see the sum of the elements in each row.
  CorrectAnswer: rowSums(ex_int_mat)
  AnswerTests: omnitest(correctExpr='rowSums(ex_int_mat)')
  Hint: Type `rowSums(ex_int_mat)`.

- Class: cmd_question
  Output: As you can imagine, `colSums()` calculates the sum of the elements in each column of a matrix. What do you predict that the function `sum()` does? Type `sum(ex_int_mat)` to see if you are correct.
  CorrectAnswer: sum(ex_int_mat)
  AnswerTests: omnitest(correctExpr='sum(ex_int_mat)')
  Hint: Type `sum(ex_int_mat)`.

- Class: cmd_question
  Output: Since matrices only contain values of the same type, this allows us to use appropriate operations. For numeric matrices, we can use `mean()`, `median()`, `sd()`, `var()`, etc. For character matrices, we can use `unique()`, `length()`, `nchar()`, etc. Type `nchar(ex_char_mat)` to see the number of characters in each element of the matrix.
  CorrectAnswer: nchar(ex_char_mat)
  AnswerTests: omnitest(correctExpr='nchar(ex_char_mat)')
  Hint: Type `nchar(ex_char_mat)`.

- Class: cmd_question
  Output: If we want to apply a function by rows or by columns, we can use the `apply()` function. The first argument is the matrix. The second argument is the dimension (rows = 1, columns = 2). And the third argument is the function. Type `apply(ex_int_mat, 1, sd)` to see the standard deviation of the elements in each row.
  CorrectAnswer: apply(ex_int_mat, 1, sd)
  AnswerTests: omnitest(correctExpr='apply(ex_int_mat, 1, sd)')
  Hint: Type `apply(ex_int_mat, 1, sd)`.

# Lists ------------------------------------------------------------------

- Class: text
  Output: A list is a collection of objects. The objects can be of different types (e.g., vectors, matrices, data frames, or lists). Lists are useful for storing a collection of objects that are related to each other.

- Class: cmd_question
  Output: To create a list, we can use the `list()` function. The first argument is the first object. The second argument is the second object. Type `ex_ls <- list(1:5, c("a", "b", "c"))` to see an example.
  CorrectAnswer: ex_ls <- list(1:5, c("a", "b", "c"))
  AnswerTests: omnitest(correctExpr='ex_ls <- list(1:5, c("a", "b", "c"))')
  Hint: Type `ex_ls <- list(1:5, c("a", "b", "c"))`.

- Class: cmd_question
  Output: Now type `ex_ls` to see the list.
  CorrectAnswer: ex_ls
  AnswerTests: omnitest(correctExpr='ex_ls')
  Hint: Type `ex_ls`.

- Class: mult_question
  Output: Lists only have one dimension, so they do not have rows and columns. With this in mind, how many elements are in the list?
  AnswerChoices: 2; 3; 4; 5
  CorrectAnswer: 2
  AnswerTests: omnitest(correctVal='2')
  Hint: Look at the number of double brackets in the list.

# Inspecting Lists

- Class: cmd_question
  Output: We can inspect the elements of a list using the `length()` function. Type `length(ex_ls)` to see the number of elements in the list.
  CorrectAnswer: length(ex_ls)
  AnswerTests: omnitest(correctExpr='length(ex_ls)')
  Hint: Type `length(ex_ls)`.

# Accessing Elements of Lists

- Class: cmd_question
  Output: We can access elements of a list using double brackets. Type `ex_ls[[1]]` to see the first element of the list.
  CorrectAnswer: ex_ls[[1]]
  AnswerTests: omnitest(correctExpr='ex_ls[[1]]')
  Hint: Type `ex_ls[[1]]`.

- Class: cmd_question
  Output: We can also access elements of a list using single brackets. Type `ex_ls[1]` to see the first element of the list.
  CorrectAnswer: ex_ls[1]
  AnswerTests: omnitest(correctExpr='ex_ls[1]')
  Hint: Type `ex_ls[1]`.

- Class: text
  Output: The difference between single and double brackets is that single brackets return a list, while double brackets return the object in the list. This is why we see the name of the object when we use single brackets.

- Class: cmd_question
  Output: The `ex_ls` list contains two objects which are not named. We can name the objects in an existing list using the `names()` function. This is a setter function, so to use it we need to assign the result to the list. Type `names(ex_ls) <- c("num", "char")` to name the objects in the list.
  CorrectAnswer: names(ex_ls) <- c("num", "char")
  AnswerTests: omnitest(correctExpr='names(ex_ls) <- c("num", "char")')
  Hint: Type `names(ex_ls) <- c("num", "char")`.

- Class: cmd_question
  Output: Now type `ex_ls` to see the list with the named objects.
  CorrectAnswer: ex_ls
  AnswerTests: omnitest(correctExpr='ex_ls')
  Hint: Type `ex_ls`.

- Class: text
  Output: Now that the list has named elements we can access the elements either with the names or with the indices. Type `ex_ls[["num"]]` to see the first element of the list.
  CorrectAnswer: ex_ls[["num"]]
  AnswerTests: omnitest(correctExpr='ex_ls[["num"]]')
  Hint: Type `ex_ls[["num"]]`.

# Calculations with Lists

- Class: cmd_question
  Output: We can perform calculations with lists. To explore how to do this let's work with the `ex_text_ls` I've created for you. Type `ex_text_ls` to see the list.
  CorrectAnswer: ex_text_ls
  AnswerTests: omnitest(correctExpr='ex_text_ls')
  Hint: Type `ex_text_ls`.

- Class: text
  Output: The `ex_text_ls` list contains five character vectors of hypothetical text messages. Each of the elements are named with the name of the person who sent the text message.

- Class: cmd_question
  Output: Since all of the elements are character vectors, we can use a function like `nchar()` to calculate the number of characters in each text message. Type `nchar(ex_text_ls)` to see the number of characters in each text message.
  CorrectAnswer: nchar(ex_text_ls)
  AnswerTests: omnitest(correctExpr='nchar(ex_text_ls)')
  Hint: Type `nchar(ex_text_ls)`.

- Class: text
  Output: The output is a vector of the number of characters in each text message. Note, however, that the output is no longer a list but rather a named character vector. This is because the `nchar()` function returns a vector and not a list.

- Class: text
  Output: "To apply a function to each element of a list and return a chosen object type we can use functions from the `purrr` package. The key function to understand is the `map()` function."

- Class: cmd_question
  Output: The `map()` function takes a list, applies a function to each element, and returns a list. The first argument is the list. The second argument is the function. Type `map(ex_text_ls, nchar)` to see the number of characters in each text message. Note that the `nchar()` function does not have parentheses!
  CorrectAnswer: map(ex_text_ls, nchar)
  AnswerTests: omnitest(correctExpr='map(ex_text_ls, nchar)')
  Hint: Type `map(ex_text_ls, nchar)`.

- Class: text
  Output: The output is a list of the number of characters in each text message. Note that the output is a list and not a named character vector. This is because the `map()` function returns a list and not a vector.

- Class: cmd_question
  Output: The map function has variants that allow us to return different object types. For example, we can use the `map_int()` function to return an integer vector. Type `map_int(ex_text_ls, nchar)` to see the number of characters in each text message.
  CorrectAnswer: map_int(ex_text_ls, nchar)
  AnswerTests: omnitest(correctExpr='map_int(ex_text_ls, nchar)')
  Hint: Type `map_int(ex_text_ls, nchar)`.

- Class: text
  Output: The output is an integer vector of the number of characters in each text message. Other variants include `map_dbl()`, `map_lgl()`, `map_chr()`, and `map_dfr()`. The type of object returned depends on the type of object returned by the function. Using `map_chr()` with the `nchar()` function would return an error because `nchar()` returns an integer vector!

- Class: cmd_question
  Output: The function that is applied to the list does not have to be a built-in function. It can be a custom function that you have created or a function you create on the fly. For example, we can create a function that returns the number of words in a text message. Type `map(ex_text_ls, function(x) length(strsplit(x, " ")[[1]]))` to see the number of words in each text message.
  CorrectAnswer: map(ex_text_ls, function(x) length(strsplit(x, " ")[[1]]))
  AnswerTests: omnitest(correctExpr='map(ex_text_ls, function(x) length(strsplit(x, " ")[[1]]))')
  Hint: Type `map(ex_text_ls, function(x) length(strsplit(x, " ")[[1]]))`.

- Class: text
  Output: I want to focus on the `function(x)` component. This is a function that we create on the fly, or 'anonymous function'. The `x` is a placeholder for the elements of the list. In the subsequent code, we use the `x` placeholder where we want to apply the function. In this case, we use the `x` placeholder in the `strsplit()` function. It is important to note that `x` is a placeholder and not a variable and can be named anything.

- Class: cmd_question
  Output: Another way to write anonymous functions is to use the `\(x)` notation. Type `map(ex_text_ls, \(x) length(strsplit(x, " ")[[1]]))` to see the number of words in each text message.
  CorrectAnswer: map(ex_text_ls, \\(x) length(strsplit(x, " ")[[1]]))
  AnswerTests: omnitest(correctExpr='map(ex_text_ls, \\(x) length(strsplit(x, " ")[[1]]))')
  Hint: Type `map(ex_text_ls, \(x) length(strsplit(x, " ")[[1]]))`.

- Class: cmd_question
  Output: Anonymous functions are useful when we want to apply a function to a list but do not want to create a function that we will use again. Furthermore, just as regular functions, anonymous functions can have multiple arguments. In the case of lists, we can use the `imap()` function to apply a function to a list and also make the element index available to the function. Type `imap(ex_text_ls, \(x, i) paste(i, x, sep = "- "))` to see the text messages with the element index.
  CorrectAnswer: imap(ex_text_ls, \\(x, i) paste(i, x, sep = "- "))
  AnswerTests: omnitest(correctExpr='imap(ex_text_ls, \\(x, i) paste(i, x, sep = "- "))')
  Hint: Type `imap(ex_text_ls, \(x, i) paste(i, x, sep = "- "))`.

# Summary --------------------------------------------------------------

- Class: text
  Output: In this lesson, we learned about how to create, inspect, and perform calculations on matrices and lists. We learned how to create matrices and document-term matrices. There are many more functions for matrices and lists that we did not cover in this lesson. I encourage you to explore the documentation for these functions to learn more.

- Class: text
  Output: That concludes the lesson on advanced objects. In the next lesson, we will learn about more advanced techniques for creating visualizations.
