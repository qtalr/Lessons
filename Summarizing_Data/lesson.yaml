- Class: meta
  Course: Lessons
  Lesson: Summarizing Data
  Author: Jerid Francom
  Type: Standard
  Organization: Wake Forest University
  Version: 0.9.0

# Overview ----------------------------------------------

- Class: text
  Output: Welcome to the Summarizing Data in R lesson! In this lesson, you'll learn how to summarize vectors and data frames with statistics and tables for better understanding and interpretation.

- Class: text
  Output: "Don't forget that you can, temporarily, leave the lesson by typing `play()` and then return by typing `nxt()`. You can also completely stop a lesson by typing `bye()` or hitting `CTRL + C`."

# Summarizing Data ----------------------------------------------

- Class: text
  Output: Let's start with an overview of why data summarization is crucial in data analysis.

- Class: text
  Output: Data summarization is the process of presenting a large amount of data in a concise and understandable format. It helps in understanding and interpreting data more easily.

- Class: text
  Output: The format may be a statistical summary such as mean, median, mode, standard deviation, etc. or a table or plot. Here, we will focus on statistical and tabular summaries, leaving plots for the next lesson.

- Class: text
  Output: Summarization is an essential step in data analysis. It helps in identifying patterns and trends in the data. It also can help in identifying outliers and missing values.

- Class: text
  Output: In short, summarization allows us to understand the data better and make informed decisions.

- Class: mult_question
  Output: T/F- The mean is a type of data summarization called a statistical summary.
  AnswerChoices: True; False
  CorrectAnswer: True
  AnswerTests: omnitest(correctVal='True')
  Hint: The mean is a statistical summary.

- Class: mult_question
  Output: Why is data summarization important?
  AnswerChoices: It helps in understanding and interpreting data more easily.; It helps in identifying patterns and trends in the data.; It helps in identifying outliers and missing values.; All of the above.
  CorrectAnswer: All of the above.
  AnswerTests: omnitest(correctVal='All of the above.')
  Hint: All of the above are reasons why data summarization is important!

# Summarizing vectors ----------------------------------------------

- Class: text
  Output: Now, let's practice summarizing vectors, both numeric and character. You will find that there are two vectors in your R workspace- `word_count` and `text_genre`.

# Numeric vectors

- Class: text
  Output: For numeric vectors, statistical summaries are useful. In R, there are functions that can be used to calculate the mean, median, standard deviation, etc.

- Class: cmd_question
  Output: Let's calculate the mean of the `word_count` vector. The function is simply `mean()` and it takes one argument, the vector. So, to calculate the mean of the `word_count` vector, we would input `mean(word_count)` into the console.
  CorrectAnswer: mean(word_count)
  AnswerTests: omnitest(correctExpr='mean(word_count)')
  Hint: Just type `mean(word_count)`.

- Class: cmd_question
  Output: There are even functions that provide multiple statistical summaries at once. One such function is `summary()`. The `summary()` function provides the minimum, 1st quartile, median, mean, 3rd quartile, and maximum. Try to calculate the summary of the `word_count` vector.
  CorrectAnswer: summary(word_count)
  AnswerTests: omnitest(correctExpr='summary(word_count)')
  Hint: Just type `summary(word_count)`.

# Character vectors

- Class: text
  Output: For character vectors, tabulating the frequencies of the values is a useful summary. In R, there are functions that can be used to calculate the frequency of each value in a vector.

- Class: cmd_question
  Output: Let's calculate the frequency of each value in the `text_genre` vector. The first function we will use is `table()`. Type `table(text_genre)` into the console.
  CorrectAnswer: table(text_genre)
  AnswerTests: omnitest(correctExpr='table(text_genre)')
  Hint: Just type `table(text_genre)`.

- Class: mult_question
  Output: From the table, which `text_genre` has the highest frequency?
  AnswerChoices: Fiction; Non-fiction; Academic
  CorrectAnswer: Fiction
  AnswerTests: omnitest(correctVal='Fiction')
  Hint: The Fiction `text_genre` has the highest frequency at 32.

# Summarizing data frames ----------------------------------------------

- Class: cmd_question
  Output: Let's now turn to summarizing data frames. You will find that there is a data frame in your R workspace- `books_df`. Let's take a look at the data frame. Type `books_df` into the console.
  CorrectAnswer: books_df
  AnswerTests: omnitest(correctExpr='books_df')
  Hint: Just type `books_df`.

- Class: exact_question
  Output: How many variables are in the `books_df` data frame?
  CorrectAnswer: 7
  AnswerTests: omnitest(correctVal='7')
  Hint: There are 7 variables in the `books_df` data frame.

- Class: mult_question
  Output: What is the most common vector type in the `books_df` data frame?
  AnswerChoices: numeric; character; logical
  CorrectAnswer: numeric
  AnswerTests: omnitest(correctVal='numeric')
  Hint: Remember both `int` and `dbl` are numeric vectors.

# skimr::skim()

- Class: text
  Output: As we know, a data frame is simply a collection of vectors of the same length. So to get a summary of each vector in the data frame, it would be nice to be able to run a single function and return summaries of each vector. Luckily, there is a function that does just that- `skim()` from the `skimr` package.

- Class: cmd_question
  Output: Let's try it out. Type `skim(books_df)` into the console.
  CorrectAnswer: skim(books_df)
  AnswerTests: omnitest(correctExpr='skim(books_df)')
  Hint: Just type `skim(books_df)`.

- Class: text
  Output: You can see that the `skim()` function returns quite a bit of information. In addition to information about the data frame, it groups the vectors by vector type and returns relevant for each given vector type.

# dplyr::summarize()

- Class: text
  Output: The `skim()` function is a great way to get a vector by vector summary of a data frame. However, many times we want to get a particular summary of a variable grouped by another variable. For example, we may want to get the mean of a numeric variable grouped by a categorical variable.

- Class: text
  Output: To do this, we will use the `dplyr` package. We've already seen the `dplyr` package in the previous lesson for subsetting data frames. Now, we will use the `dplyr` package for summarizing data frames!

- Class: text
  Output: Before we get to getting summaries of variables grouped by another variable, let's get familiar with the `summarize()` function from the `dplyr` package for summarizing single variables in a data frame.

- Class: cmd_question
  Output: Let's calculate the mean of the `word_count` variable in the `books_df` data frame. The `summarize()` function takes two arguments- the data frame and the summary function. So, to calculate the mean of the `word_count` variable in the `books_df` data frame, we would input `summarize(books_df, mean(word_count))` into the console.
  CorrectAnswer: summarize(books_df, mean(word_count))
  AnswerTests: omnitest(correctExpr='summarize(books_df, mean(word_count))')
  Hint: Just type `summarize(books_df, mean(word_count))`.

- Class: text
  Output: The output of the `summarize()` function is a data frame. In this case, we have a data frame with one row and one column. The column name is the name of the summary function used. The column name is `mean(word_count)`. This is not a very good column name, so in practice, we will assign the result of the `mean()` function to a variable and that variable name will be returned as the column name.

- Class: cmd_question
  Output: Let's try it out. Assign the result of the `mean()` function to a variable called `avg_word_count` inside the `summarize()` function. Type `summarize(books_df, avg_word_count = mean(word_count))` into the console. Remember you can use the up arrow to recall previous commands!
  CorrectAnswer: summarize(books_df, avg_word_count = mean(word_count))
  AnswerTests: omnitest(correctExpr='summarize(books_df, avg_word_count = mean(word_count))')
  Hint: Just type `summarize(books_df, avg_word_count = mean(word_count))`.

- Class: cmd_question
  Output: Great! Now, we can add as many summary functions as we want to the `summarize()` function, each with a different variable name, inside the `summarize()` function with a comma separating each summary function. Let's add the `median()` function to the `summarize()` function. Type `summarize(books_df, avg_word_count = mean(word_count), med_word_count = median(word_count))` into the console.
  CorrectAnswer: summarize(books_df, avg_word_count = mean(word_count), med_word_count = median(word_count))
  AnswerTests: omnitest(correctExpr='summarize(books_df, avg_word_count = mean(word_count), med_word_count = median(word_count))')
  Hint: Just type `summarize(books_df, avg_word_count = mean(word_count), med_word_count = median(word_count))`.

- Class: text
  Output: You can see that the `summarize()` function returns a data frame with one row and two columns. The column names are the variable names we assigned to the results of the summary functions.

- Class: text
  Output: Now, let's get to summarizing variables grouped by another variable. To do this, we will use the `group_by()` function from the `dplyr` package. The `group_by()` function takes two arguments- the data frame and the grouping variable.

- Class: text
  Output: We can add the `group_by()` step before our `summarize()` step using the pipe operator to perform the summarizations grouped by the grouping variable. The format looks like this -- data_df |> group_by(grouping_var) |> summarize(summary_var = summary_func(var)).

- Class: cmd_question
  Output: Let's try it out. Type `books_df |> group_by(text_genre) |> summarize(avg_word_count = mean(word_count), med_word_count = median(word_count))` into the console.
  CorrectAnswer: books_df |> group_by(text_genre) |> summarize(avg_word_count = mean(word_count), med_word_count = median(word_count))
  AnswerTests: omnitest(correctExpr='books_df |> group_by(text_genre) |> summarize(avg_word_count = mean(word_count), med_word_count = median(word_count))')
  Hint: Just type `books_df |> group_by(text_genre) |> summarize(avg_word_count = mean(word_count), med_word_count = median(word_count))`.

- Class: text
  Output: With this logic, we can derive any number of summaries by any number of grouping variables. Note, however, that the grouping variable must have "groups". For example, grouping `text_genre` by `word_count` would not work because each value of `word_count` is unique.

# Summary ----------------------------------------------

- Class: text
  Output: In this lesson, you learned how to summarize vectors and data frames with statistics and tables for better understanding and interpretation.

- Class: text
  Output: There is much more to learn about summarizing data, but for now you have a good foundation to build upon. Up next, you'll learn about visual summaries with the `ggplot2` package.
