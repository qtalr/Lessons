- Class: meta
  Course: Lessons
  Lesson: Tidy Datasets
  Author: Jerid Francom
  Type: Standard
  Organization: Wake Forest University
  Version: 0.9.0

# Overview ---------------------------------------------------------------

- Class: text
  Output: Welcome to the lesson on tidying data. This lesson will cover the basics of tidying data. We review and expand our knowledge of object types in R and demonstrate some common data manipulation techniques.

- Class: text
  Output: "Don't forget that you can, temporarily, leave the lesson by typing `play()` and then return by typing `nxt()`. You can also completely stop a lesson by hitting `CTRL + C` at any time."

# Object Types -----------------------------------------------------------

- Class: text
  Output: As we have seen in previous lessons, there are various types of objects in R. Primarily, we have worked with vectors and data frames. We will review these objects and introduce a few new ones.

# 1-dimensional

# - Vectors

- Class: text
  Output: Vectors are the most basic object in R. They are a collection of values of the same type. We have seen vectors of numbers, characters, and logical values.

- Class: cmd_question
  Output: Take, for example, the variable `ns_chr` which contains a character vector of sentences from native speakers of English. Let's look at this vector. Type `n_chr` and hit enter.
  CorrectAnswer: ns_chr
  AnswerTests: omnitest(correctExpr='ns_chr')
  Hint: Type `ns_chr` and hit enter.

# - Inspection and subsetting

- Class: cmd_question
  Output: We can inspect the contents of a vector by typing the name of the vector and hitting enter, as we just did. We can also find out other information about the vector. For example, a 1-dimensional vector has a length. Type `length(ns_chr)` and hit enter.
  CorrectAnswer: length(ns_chr)
  AnswerTests: omnitest(correctExpr='length(ns_chr)')
  Hint: Type `length(ns_chr)` and hit enter.

- Class: cmd_question
  Output: We can also find out the class of the vector. Type `class(ns_chr)` and hit enter.
  CorrectAnswer: class(ns_chr)
  AnswerTests: omnitest(correctExpr='class(ns_chr)')
  Hint: Type `class(ns_chr)` and hit enter.

- Class: cmd_question
  Output: We can also subset vectors. We can enter the vector element(s) we want to subset using brackets. For example, if we want the first element of the vector, we can type `ns_chr[1]` and hit enter.
  CorrectAnswer: ns_chr[1]
  AnswerTests: omnitest(correctExpr='ns_chr[1]')
  Hint: Type `ns_chr[1]` and hit enter.

- Class: cmd_question
  Output: We can also subset multiple elements of a vector. For example, if we want the first three elements of the vector, we can type `ns_chr[1:3]` and hit enter.
  CorrectAnswer: ns_chr[1:3]
  AnswerTests: omnitest(correctExpr='ns_chr[1:3]')
  Hint: Type `ns_chr[1:3]` and hit enter.

# 2-dimensional

- Class: text
  Output: We have also seen 2-dimensional objects. The primary 2-dimensional object we have worked with is the data frame. Data frames are a collection of vectors. Each vector is a column in the data frame. Importantly, each vector is the same length. This gives us a rectangular shape.

# - Data frames

- Class: cmd_question
  Output: To create a data frame, we can use the `data.frame()` function. from base R. As arguments, we pass vectors to this function. If the vector is not already named, or we want to change the name as it appears in the data frame, we can use the `name = vector` syntax. Let's create a data frame called `ns_df` with the vector `ns_chr` named `text`. Type `ns_df <- data.frame(text = ns_chr)` and hit enter.
  CorrectAnswer: ns_df <- data.frame(text = ns_chr)
  AnswerTests: omnitest(correctExpr='ns_df <- data.frame(text = ns_chr)')
  Hint: Type `ns_df <- data.frame(text = ns_chr)` and hit enter.

- Class: text
  Output: Data frames are the backbone of data analysis in R. In the Tidyverse ecosystem, data frames are often worked with as tibbles. Tibbles are a special type of data frame that have some additional features. But at the end of the day, they are still data frames.

- Class: cmd_question
  Output: We can create a tibble from vectors using the `tibble()` function from the `tibble` package. It works just like the `data.frame()` function. We can also use the `as_tibble()` function to convert a data frame to a tibble. Let's create a tibble from our data frame. Type `ns_tbl <- as_tibble(ns_df)` and hit enter.
  CorrectAnswer: ns_tbl <- as_tibble(ns_df)
  AnswerTests: omnitest(correctExpr='ns_tbl <- as_tibble(ns_df)')
  Hint: Type `ns_tbl <- as_tibble(ns_df)` and hit enter.

- Class: cmd_question
  Output: We can inspect the contents of a data frame by typing the name of the data frame and hitting enter. Do this now for the `ns_tbl` tibble.
  CorrectAnswer: ns_tbl
  AnswerTests: omnitest(correctExpr='ns_tbl')
  Hint: Type `ns_tbl` and hit enter.

# Matrices

- Class: text
  Output: Another type of 2-dimensional object is a matrix. A matrix is a collection vectors of the same length and the same type. So the primary difference between a matrix and a data frame is that a matrix can only contain one type of data. We will not work with matrices in this lesson, but you should be aware of them.

# Lists

- Class: text
  Output: Finally, we have lists. Lists are 2-dimensional objects that can contain any type of data with any length. In fact, lists are actually the most common type of 2-dimensional object in R. Why is this? Well, data frames and matrices are actually lists with restrictions on data types and/ or length.

- Class: cmd_question
  Output: We can create a list using the `list()` function. We can pass any type of object to this function. Let's create a list called `ns_lst` with the vector `ns_chr` and the data frame `ns_tbl`. Type `ns_lst <- list(chr = ns_chr, dataframe = ns_tbl)` and hit enter.
  CorrectAnswer: ns_lst <- list(chr = ns_chr, dataframe = ns_tbl)
  AnswerTests: omnitest(correctExpr='ns_lst <- list(chr = ns_chr, dataframe = ns_tbl)')
  Hint: Type `ns_lst <- list(chr = ns_chr, dataframe = ns_tbl)` and hit enter.

- Class: cmd_question
  Output: We can inspect the contents of a list by typing the name of the list and hitting enter. Do this now for the `ns_lst` list.
  CorrectAnswer: ns_lst
  AnswerTests: omnitest(correctExpr='ns_lst')
  Hint: Type `ns_lst` and hit enter.

# - Inspection and subsetting

- Class: text
  Output: As we've seen previously, data frames can be subsetted using brackets, much like vectors. Yet, since there are 2 dimensions, we need to specify both the rows and columns we want to subset. For example, `ns_tbl[3, 1]`. Will return the value in the third row and first column.

- Class: cmd_question
  Output: We also saw that we can subset vectors with functions from the `dplyr` package. For example, we can use the `select()` function to select columns. And we can use the `slice()` function to select rows. Let's select the first row of the `ns_tbl` tibble. Type `ns_tbl |> slice(1)` and hit enter.
  CorrectAnswer: ns_tbl |> slice(1)
  AnswerTests: omnitest(correctExpr='ns_tbl |> slice(1)')
  Hint: Type `ns_tbl |> slice(1)` and hit enter.

- Class: cmd_question
  Output: A useful operation is to extract a vector from a data frame. We can do this with the `pull()` function. The argument to this function is the name of the column we want to extract. Let's extract the `text` column from the `ns_tbl` tibble. Type `ns_tbl |> pull("text")` and hit enter.
  CorrectAnswer: ns_tbl |> pull("text")
  AnswerTests: omnitest(correctExpr='ns_tbl |> pull("text")')
  Hint: Type `ns_tbl |> pull("text")` and hit enter.

- Class: text
  Output: The `pull()` function can also take a numeric index. This is helpful when we want to extract a column by position. Furthermore, the `pull()` function will allow us to use the column name without quotes.

- Class: cmd_question
  Output: We can also subset lists with brackets. However, the syntax is a bit different. We use double brackets to subset lists. For example, `ns_lst[[1]]` will return the first element of the list. Let's subset the first element of the `ns_lst` list. Type `ns_lst[[1]]` and hit enter.
  CorrectAnswer: ns_lst[[1]]
  AnswerTests: omnitest(correctExpr='ns_lst[[1]]')
  Hint: Type `ns_lst[[1]]` and hit enter.

- Class: cmd_question
  Output: Since the first element in the `ns_lst` list is a character vector, the vector elements are returned. If we want to subset the first element of the list and return the first element in the vector, we can use brackets after our double brackets. For example, `ns_lst[[1]][1]` will return the first element of the first element of the list.
  CorrectAnswer: ns_lst[[1]][1]
  AnswerTests: omnitest(correctExpr='ns_lst[[1]][1]')
  Hint: Type `ns_lst[[1]][1]` and hit enter.

- Class: cmd_question
  Output: As you can see this bracket-based approach can get a bit confusing. We can also use the `pluck()` function from the `purrr` package to subset lists. `pluck()` can take a numeric index or a name (for named list elements). Let's use `pluck()` to subset the first element of the `ns_lst` list. Type `ns_lst |> pluck(1)` and hit enter.
  CorrectAnswer: ns_lst |> pluck(1)
  AnswerTests: omnitest(correctExpr='ns_lst |> pluck(1)')
  Hint: Type `ns_lst |> pluck(1)` and hit enter.

- Class: cmd_question
  Output: We can also use the `pluck()` function to subset the first element of the list and return the first element of the vector. We do this by passing a second argument to the function. This argument is the index of the element we want to subset. For example, `ns_lst |> pluck(1, 1)` will return the first element of the first element of the list.
  CorrectAnswer: ns_lst |> pluck(1, 1)
  AnswerTests: omnitest(correctExpr='ns_lst |> pluck(1, 1)')
  Hint: Type `ns_lst |> pluck(1, 1)` and hit enter.


# Manipulate data frames --------------------------------------------------

- Class: cmd_question
  Output: With our knowledge of object types, let's turn to creating and working with data frames in more realistic scenarios. Let's start with the `ns_tbl` tibble we created earlier. Type `ns_tbl` and hit enter to review the contents of the tibble.
  CorrectAnswer: ns_tbl
  AnswerTests: omnitest(correctExpr='ns_tbl')
  Hint: Type `ns_tbl` and hit enter.

- Class: mult_question
  Output: What is the structure of the `ns_tbl` tibble?
  AnswerChoices: One column and 5 rows; Two columns and 5 rows; Five columns and 1 row; Five columns and 5 rows
  CorrectAnswer: One column and 5 rows
  AnswerTests: omnitest(correctVal='One column and 5 rows')
  Hint: Note that N x N means N rows and N columns.

- Class: cmd_question
  Output: Let's say we want to add a column to the `ns_tbl` tibble that would serve as the document id for each of these observations. We can do this with the `mutate()` function from the `dplyr` package. `mutate()` is similar to the `summarize()` function, but instead of returning a summarized value, it returns a vector of the same length as the input. Let's add a column called `doc_id` to the `ns_tbl` tibble. Type `ns_tbl |> mutate(doc_id = 1:n())` and hit enter.
  CorrectAnswer: ns_tbl |> mutate(doc_id = 1:n())
  AnswerTests: omnitest(correctExpr='ns_tbl |> mutate(doc_id = 1:n())')
  Hint: Type `ns_tbl |> mutate(doc_id = 1:n())` and hit enter.

- Class: cmd_question
  Output: The `n()` function returns the number of rows in the data frame. So, `1:n()` will return a vector of integers from 1 to the number of rows in the data frame. `dplyr` has a convenient shortcut for `1:n()`, which is `row_number()`. Let's add a column called `doc_id` to the `ns_tbl` tibble using `row_number()`. This time we will overwrite our earlier `ns_tbl`. Type `ns_tbl <- ns_tbl |> mutate(doc_id = row_number())` and hit enter.
  CorrectAnswer: ns_tbl <- ns_tbl |> mutate(doc_id = row_number())
  AnswerTests: omnitest(correctExpr='ns_tbl <- ns_tbl |> mutate(doc_id = row_number())')
  Hint: Type `ns_tbl <- ns_tbl |> mutate(doc_id = row_number())` and hit enter.

- Class: cmd_question
  Output: Inspect the updated `ns_tbl` tibble. Type `ns_tbl` and hit enter.
  CorrectAnswer: ns_tbl
  AnswerTests: omnitest(correctExpr='ns_tbl')
  Hint: Type `ns_tbl` and hit enter.

- Class: cmd_question
  Output: Let's say we want to split each of the observations in the `text` column into sentences. We can do this with the `str_split()` function from the `stringr` package. The first argument to this function is the vector we want to split. The second argument is the pattern we want to split on. As it turns out, each sentence is separated by the `\n` character which is the newline character. Let's split the `text` column on the `\n` character, which is `\\n` in R. Type `ns_tbl |> mutate(sentences = str_split(text, "\\n"))` and hit enter.
  CorrectAnswer: ns_tbl |> mutate(sentences = str_split(text, "\\\\n"))
  AnswerTests: omnitest(correctExpr='ns_tbl |> mutate(sentences = str_split(text, "\\\\n"))')
  Hint: Type `ns_tbl |> mutate(sentences = str_split(text, "\\n"))` and hit enter.

- Class: mult_question
  Output: What is the type of the `sentences` column in the `ns_tbl` tibble?
  AnswerChoices: character; list; vector; matrix
  CorrectAnswer: list
  AnswerTests: omnitest(correctVal='list')
  Hint: Look at the type shown directly below the column name.

- Class: text
  Output: The `sentences` column is a list because the `str_split()` function returns a list. This is because each element in the `text` column is split into a vector of sentences and for each element in the `text` column, the number of sentences could be different. When we have a two-dimensional object embedded in a two-dimensional object, we have a nested structure.

- Class: cmd_question
  Output: Before we move forward, let's assign the output of the `str_split()` operation to `ns_tbl`. Type `ns_tbl <- ns_tbl |> mutate(sentences = str_split(text, "\\n"))` and hit enter.
  CorrectAnswer: ns_tbl <- ns_tbl |> mutate(sentences = str_split(text, "\\n"))
  AnswerTests: omnitest(correctExpr='ns_tbl <- ns_tbl |> mutate(sentences = str_split(text, "\\n"))')
  Hint: Type `ns_tbl <- ns_tbl |> mutate(sentences = str_split(text, "\\n"))` and hit enter.

- Class: cmd_question
  Output: Now back to our nested structure. If we want to have a single column of sentences, we need to unnest the list. This process in effect expands the list and maintains the structure of the data frame. So for a list element that has 3 sentences, we will have 3 rows in the data frame that correspond to that list element. We can do this with the `unnest()` function from the `tidyr` package. Let's unnest the `sentences` column. Type `ns_tbl |> unnest(sentences)` and hit enter.
  CorrectAnswer: ns_tbl |> unnest(sentences)
  AnswerTests: omnitest(correctExpr='ns_tbl |> unnest(sentences)')
  Hint: Type `ns_tbl |> unnest(sentences)` and hit enter.

- Class: text
  Output: The `unnest()` function has produced a data frame with 9 rows. We can see that some of the orginal documents had more than one sentence. We can also see that the `text` and `doc_id` columns have been repeated for each sentence. This is because the `unnest()` function maintains the structure of the data frame.

- Class: cmd_question
  Output: Let's assign the output of the `unnest()` operation to `ns_tbl`. Type `ns_tbl <- ns_tbl |> unnest(sentences)` and hit enter.
  CorrectAnswer: ns_tbl <- ns_tbl |> unnest(sentences)
  AnswerTests: omnitest(correctExpr='ns_tbl <- ns_tbl |> unnest(sentences)')
  Hint: Type `ns_tbl <- ns_tbl |> unnest(sentences)` and hit enter.

- Class: cmd_question
  Output: Now let's say we want to add a column to the `ns_tbl` tibble that would serve as the sentence id for each of these observations. We can do this with the `mutate()` function from the `dplyr` package. But we want to assign the sentence id within each document. So we need to group the data frame by the `doc_id` column. We can do this with the `group_by()` function. Let's add a column called `sent_id` to the `ns_tbl` tibble. Type `ns_tbl |> group_by(doc_id) |> mutate(sent_id = row_number())` and hit enter.
  CorrectAnswer: ns_tbl |> group_by(doc_id) |> mutate(sent_id = row_number())
  AnswerTests: omnitest(correctExpr='ns_tbl |> group_by(doc_id) |> mutate(sent_id = row_number())')
  Hint: Type `ns_tbl |> group_by(doc_id) |> mutate(sent_id = row_number())` and hit enter.

- Class: text
  Output: The `group_by()` function has grouped the data frame by the `doc_id` column. This means that the `mutate()` function will be applied to each group separately. So the `row_number()` function will return the row number within each group.

- Class: text
  Output: From this point we can continue to manipulate the data frame as we see fit, selecting, filtering, and summarizing as needed. But we will stop here for now.

# Summary ----------------------------------------------------------------

- Class: text
  Output: In this lesson we reviewed the various object types in R. We also learned how to manipulate data frames. We learned how to add columns to data frames with `mutate()` and how to work with nested data frames.

- Class: text
  Output: As you can appreciate, there are many ways to manipulate data frames in R. We have only scratched the surface. But hopefully you have a better understanding of the basics of data manipulation in R. In the next lesson, we will continue to learn about data manipulation in R to prepare datasets for analysis.
