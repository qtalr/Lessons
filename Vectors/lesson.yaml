- Class: meta
  Course: Lessons
  Lesson: Vectors
  Author: Jerid Francom
  Type: Standard
  Organization: Wake Forest University
  Version: 0.9.0

# Overview ----------------------------------------------

- Class: text
  Output: "In this lesson, we will learn about vectors. We will learn how to create vectors, discuss the types of vectors, and learn how to store them in variables."

- Class: text
  Output: "Don't forget that you can, temporarily, leave the lesson by typing `play()` and then return by typing `nxt()`. You can also completely stop a lesson by hitting `CTRL + C` at any time."

# Vectors ----------------------------------------------

# Orient students to the concept of a vector
# - A vector is a collection of values

- Class: text
  Output: A vector is simply a collection of values of the same type. For example, a vector can be a collection of numbers, a collection of characters, or a collection of logical values.

- Class: cmd_question
  Output: Let's create a numeric vector. A numeric vector is a sequence of numbers. In R, we can create a numeric vector using the `c()` function. The `c()` function combines its arguments to form a vector. Let's create a numeric vector with the numbers 1 through 5 by inputing `c(1, 2, 3, 4, 5)` into the console.
  CorrectAnswer: c(1, 2, 3, 4, 5)
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4, 5)')
  Hint: Just type `c(1, 2, 3, 4, 5)`.

- Class: cmd_question
  Output: We can also create a character vector using the `c()` function. This time, however, the arguments will be quoted. Let's create a character vector with the letters "a" through "e" by inputing `c("a", "b", "c", "d", "e")` into the console.
  CorrectAnswer: c("a", "b", "c", "d", "e")
  AnswerTests: omnitest(correctExpr='c("a", "b", "c", "d", "e")')
  Hint: Just type `c("a", "b", "c", "d", "e")`.

- Class: cmd_question
  Output: Note that numerals can be part of a character vector, but they are interpreted as characters not numbers. Let's create a character vector with the letters "a" through "e" and the number 1 by inputing `c("a", "b", "c", "d", "e", 1)` into the console. Note, you can use the up arrow key to recall the previous command!
  CorrectAnswer: c("a", "b", "c", "d", "e", 1)
  AnswerTests: omnitest(correctExpr='c("a", "b", "c", "d", "e", 1)')
  Hint: Just type `c("a", "b", "c", "d", "e", 1)`.

- Class: text
  Output: Looking at the output we can see that when we mix numerals with characters, the vector is returned as a character vector. Importantly, vectors can only be of one type.

- Class: cmd_question
  Output: Another primary vector type is a logical vector. Logical vectors contain logical values, which are either `TRUE` or `FALSE` (uppercase). Let's create a logical vector with the values `TRUE`, `FALSE`, `TRUE`, `FALSE`, `TRUE` by inputing `c(TRUE, FALSE, TRUE, FALSE, TRUE)` into the console.
  CorrectAnswer: c(TRUE, FALSE, TRUE, FALSE, TRUE)
  AnswerTests: omnitest(correctExpr='c(TRUE, FALSE, TRUE, FALSE, TRUE)')
  Hint: Just type `c(TRUE, FALSE, TRUE, FALSE, TRUE)`.

- Class: text
  Output: Logical vectors are not enclosed by quotes because they are not characters. They are logical values.

- Class: text
  Output: Another property of vectors is that they can be of any length. Now, typing out a vector of length 100 would be tedious. So in practice vectors (and other data structures that we will see later) are read into R from external sources, such as a file.

- Class: cmd_question
  Output: There are, however, functions that can be used to generate vectors of a specified type and length. One such function is the `seq()` function. The `seq()` function generates a sequence of numbers. It takes three arguments... `from`, `to`, and `by`. `from` is the starting number, `to` is the ending number, and `by` is the increment. Let's create a numeric vector with the numbers 1 through 99 by inputing `seq(1, 99, by = 1)` into the console.
  CorrectAnswer: seq(1, 99, by = 1)
  AnswerTests: omnitest(correctExpr='seq(1, 99, by = 1)')
  Hint: Just type `seq(1, 99, by = 1)`.

# - Vectors are the primary data structure in R
# - All values in a vector must be of the same type
# - Vectors can be of any length

# Variables ----------------------------------------------

# - Vectors can be stored in variables
- Class: text
  Output: Creating and printing vectors in the console is useful for learning, but in practice we will want to store vectors so we can use them in subsequent operations, such as calculations.

# - Variables are assigned using the assignment operator
- Class: text
  Output: In R, we can store vectors, and other data structures, in variables. Variables are assigned using the assignment operator, which is the less than symbol followed by a dash `<-`. You can type these to characters manually, or use the keyboad shortcut in RStudio, which is `Alt + -`.

- Class: cmd_question
  Output: Let's create a numeric vector with the numbers 1 through 5 and assign it to a variable named `vec_1_num` by inputing `vec_1_num <- c(1, 2, 3, 4, 5)` into the console.
  CorrectAnswer: vec_1_num <- c(1, 2, 3, 4, 5)
  AnswerTests: omnitest(correctExpr='vec_1_num <- c(1, 2, 3, 4, 5)')
  Hint: Just type `vec_1_num <- c(1, 2, 3, 4, 5)`.

- Class: cmd_question
  Output: This time the output of the `c()` function does not print to the console, rather it is stored in the variable `vec_1_num`. We can print the contents of `vec_1_num` to the console by typing `vec_1_num` into the console.
  CorrectAnswer: vec_1_num
  AnswerTests: omnitest(correctExpr='vec_1_num')
  Hint: Just type `vec_1_num`.

- Class: text
  Output: You will also notice that once you have assigned a data structure to a variable, it will show up in the environment pane in RStudio. You can also see a preview of the contents of the variable.


# - Variable names should be descriptive and meaningful. For example, `vec_1_num` is a good variable name because it describes the contents of the variable. A bad variable name is one that is not descriptive or meaningful. For example, `x` is a bad variable name because it does not describe the contents of the variable.
- Class: text
  Output: The naming of variables is more important that it might otherwise seem. When working in R, we will be creating numerous variables in the same session. As the number of variables increase, the difficulty in remembering what each variable contains also increases.

- Class: text
  Output: For your benefit, and for those running your code, it is recommendable to create variable names that are descriptive and meaningful yet short and concise as possible.

- Class: text
  Output: Take for example our variable `vec_1_num`. It is not the most meaningful variable name, as the vector it contains is for demonstration purposes, but it is more meaningful than `x`.

# - Variable names have some restrictions:
- Class: text
  Output: Variable names have some restrictions in R that we need to be mindful of. They cannot start with a number, cannot contain spaces, cannot contain special characters (except for `_` and `.`), and cannot be a reserved word (e.g., `if`, `else`, `for`, `while`, `function`, `TRUE`, `FALSE`, `NULL`, etc.

# - Vectors stored in variables can be used in calculations

- Class: cmd_question
  Output: Now back to thinking about vectors and how can use them in operations. Take for example a simple calculation, say `1 + 1`. Enter this in the console and press enter.
  CorrectAnswer: 1 + 1
  AnswerTests: omnitest(correctExpr='1 + 1')
  Hint: Just type `1 + 1`.

- Class: text
  Output: This trivial addition calculation serves to underscore the importance of vectors in R. The output is `2` but before the value, we see that `[1]` is printed. This is because the output is a vector of length 1. And in fact, the calculation `1 + 1` is really `c(1) + c(1)`.

- Class: cmd_question
  Output: Let's push this notion a little further. Let's now perform the following calculation `c(1, 2, 3, 4, 5) + 2`. Enter this in the console and press enter.
  CorrectAnswer: c(1, 2, 3, 4, 5) + 2
  AnswerTests: omnitest(correctExpr='c(1, 2, 3, 4, 5) + 2')
  Hint: Just type `c(1, 2, 3, 4, 5) + 2`.

- Class: text
  Output: The result shows that what has happend is that 2 was added to each element of the vector. This is because R is vectorized. This means that R will perform the operation on each element of the vector. This is a very powerful feature of R.

- Class: cmd_question
  Output: Now let's create another numeric vector of length 5 with the numbers 1 through 5 and assign it to a variable named `vec_2_num` by inputing `vec_2_num <- 1:5` (yet another way to create a numeric vector) into the console.
  CorrectAnswer: vec_2_num <- 1:5
  AnswerTests: omnitest(correctExpr='vec_2_num <- 1:5')
  Hint: Just type `vec_2_num <- 1:5`.

- Class: cmd_question
  Output: Now let's perform the following calculation `vec_1_num + vec_2_num`. Enter this in the console and press enter.
  CorrectAnswer: vec_1_num + vec_2_num
  AnswerTests: omnitest(correctExpr='vec_1_num + vec_2_num')
  Hint: Just type `vec_1_num + vec_2_num`.

- Class: text
  Output: The result shows that what has happend is that the elements of `vec_1_num` were added to the corresponding elements of `vec_2_num`. Again this is because R is vectorized. Note, if the vectors are not the same length, R will recycle the shorter vector until it is the same length as the longer vector.

# Summary ----------------------------------------------

- Class: text
  Output: In this lesson, we learned about vectors. We learned how to create vectors, discuss the types of vectors, and learn how to store them in variables. As a primary data structure in R, vectors are a very important concept to understand and they will be used throughout the rest of the course.

- Class: text
  Output: This concludes this introduction to vectors. In our next lesson, we will add to our knowledge of vectors and introduce other data structures in R.
